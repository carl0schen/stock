# .github/workflows/generate-rss.yml
name: Generate RSS Feed

on:
  push:
    branches: [ main ]
    paths:
      - '20*/[0-9][0-9]/[0-9][0-9]/**'        # 日報
      - '20*/weekly/[0-9][0-9]/**'            # 週報
      - '20*/monthly/[0-9][0-9]/**'           # 月報
  workflow_dispatch:

jobs:
  generate-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for other workflows
      if: github.event_name == 'push'
      run: |
        echo "等待其他 workflow 完成..."
        sleep 60
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate Unified RSS Feed
      run: |
        cat > generate-rss.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // RSS 模板
        const rssHeader = `<?xml version="1.0" encoding="UTF-8"?>
        <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
          <channel>
            <title>台股盤後 - 法人買賣超整理</title>
            <link>https://stock.may.tw</link>
            <description>利用AI彙整台股盤後資訊，快速掌握市場動向。</description>
            <language>zh-TW</language>
            <atom:link href="https://stock.may.tw/rss.xml" rel="self" type="application/rss+xml"/>
            <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>`;

        const rssFooter = `  </channel>
        </rss>`;

        // 獲取所有文章
        const getAllArticles = () => {
          const articles = [];
          
          const yearFolders = fs.readdirSync('.')
            .filter(item => fs.statSync(item).isDirectory() && /^20\d{2}$/.test(item));
          
          yearFolders.forEach(year => {
            const yearPath = `./${year}`;
            
            // === 掃描日報 ===
            const monthFolders = fs.readdirSync(yearPath)
              .filter(item => {
                const itemPath = path.join(yearPath, item);
                return fs.statSync(itemPath).isDirectory() && /^(0[1-9]|1[0-2])$/.test(item);
              });
            
            monthFolders.forEach(month => {
              const monthPath = path.join(yearPath, month);
              if (fs.existsSync(monthPath)) {
                const dayFolders = fs.readdirSync(monthPath)
                  .filter(item => {
                    const itemPath = path.join(monthPath, item);
                    return fs.statSync(itemPath).isDirectory() && /^(0[1-9]|[12]\d|3[01])$/.test(item);
                  });
                
                dayFolders.forEach(day => {
                  const indexPath = path.join(monthPath, day, 'index.html');
                  if (fs.existsSync(indexPath)) {
                    const date = new Date(year, month - 1, day, 16, 30, 0); // 下午4:30
                    articles.push({
                      path: `${year}/${month}/${day}`,
                      title: `${year}年${month}月${day}日 法人買賣超整理`,
                      description: `本文整理了${year}年${month}月${day}日台股盤後三大法人的交易動向。`,
                      date: date,
                      sortKey: date.getTime(),
                      type: 'daily'
                    });
                  }
                });
              }
            });
            
            // === 掃描週報 ===
            const weeklyPath = path.join(yearPath, 'weekly');
            if (fs.existsSync(weeklyPath)) {
              const weekFolders = fs.readdirSync(weeklyPath)
                .filter(item => {
                  const itemPath = path.join(weeklyPath, item);
                  return fs.statSync(itemPath).isDirectory() && /^[0-5]\d$/.test(item);
                });
              
              weekFolders.forEach(week => {
                const indexPath = path.join(weeklyPath, week, 'index.html');
                if (fs.existsSync(indexPath)) {
                  // 計算該週的大致日期 (週日晚上8點)
                  const weekNum = parseInt(week);
                  const jan1 = new Date(year, 0, 1);
                  const firstSunday = new Date(jan1);
                  firstSunday.setDate(jan1.getDate() + (7 - jan1.getDay()) % 7);
                  const weekDate = new Date(firstSunday);
                  weekDate.setDate(firstSunday.getDate() + (weekNum - 1) * 7);
                  weekDate.setHours(20, 0, 0); // 週日晚上8點
                  
                  articles.push({
                    path: `${year}/weekly/${week}`,
                    title: `${year}年第${week}週 法人買賣超整理週報`,
                    description: `本文整理了${year}年第${week}週三大法人的交易動向。`,
                    date: weekDate,
                    sortKey: weekDate.getTime(),
                    type: 'weekly'
                  });
                }
              });
            }
            
            // === 掃描月報 ===
            const monthlyPath = path.join(yearPath, 'monthly');
            if (fs.existsSync(monthlyPath)) {
              const monthFolders = fs.readdirSync(monthlyPath)
                .filter(item => {
                  const itemPath = path.join(monthlyPath, item);
                  return fs.statSync(itemPath).isDirectory() && /^(0[1-9]|1[0-2])$/.test(item);
                });
              
              monthFolders.forEach(month => {
                const indexPath = path.join(monthlyPath, month, 'index.html');
                if (fs.existsSync(indexPath)) {
                  // 月報設為該月最後一天晚上9點
                  const date = new Date(year, month, 0, 21, 0, 0); // 月底晚上9點
                  
                  articles.push({
                    path: `${year}/monthly/${month}`,
                    title: `${year}年${month}月 法人買賣超整理月報`,
                    description: `本文整理了${year}年${month}月三大法人的交易動向。`,
                    date: date,
                    sortKey: date.getTime(),
                    type: 'monthly'
                  });
                }
              });
            }
          });
          
          // 按時間降序排列（最新的在前）
          return articles.sort((a, b) => b.sortKey - a.sortKey);
        };

        // 生成 RSS 項目
        const generateRSSItems = (articles) => {
          return articles.slice(0, 20).map(article => { // 取最新 20 篇
            const link = `https://stock.may.tw/${article.path}/`;
            const guid = `https://stock.may.tw/${article.path}/`;
            
            return `    <item>
              <title>${article.title}</title>
              <link>${link}</link>
              <description>${article.description}</description>
              <pubDate>${article.date.toUTCString()}</pubDate>
              <guid isPermaLink="true">${guid}</guid>
            </item>`;
          }).join('\n');
        };

        // 主程序
        const main = () => {
          try {
            const articles = getAllArticles();
            console.log(`找到總共 ${articles.length} 篇文章`);
            
            // 顯示各類型文章數量
            const dailyCount = articles.filter(a => a.type === 'daily').length;
            const weeklyCount = articles.filter(a => a.type === 'weekly').length;
            const monthlyCount = articles.filter(a => a.type === 'monthly').length;
            
            console.log(`日報: ${dailyCount} 篇`);
            console.log(`週報: ${weeklyCount} 篇`);
            console.log(`月報: ${monthlyCount} 篇`);
            
            if (articles.length === 0) {
              console.log('沒有找到任何文章');
              return;
            }
            
            // 顯示最新的幾篇文章
            console.log('\n最新的文章:');
            articles.slice(0, 5).forEach((article, index) => {
              console.log(`  ${index + 1}. [${article.type}] ${article.title}`);
            });

            const rssItems = generateRSSItems(articles);
            const rssContent = `${rssHeader}\n${rssItems}\n${rssFooter}`;
            
            fs.writeFileSync('rss.xml', rssContent, 'utf8');
            console.log(`\nRSS feed 生成完成，包含最新 ${Math.min(articles.length, 20)} 篇文章`);
          } catch (error) {
            console.error('生成 RSS 時發生錯誤:', error);
            process.exit(1);
          }
        };

        main();
        EOF

        node generate-rss.js

    - name: Commit and push RSS file with retry
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add rss.xml
        
        if git diff --staged --quiet; then
          echo "RSS 檔案沒有變更"
          exit 0
        fi
        
        git commit -m "🤖 Auto-update RSS feed"
        
        # 推送重試機制
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "嘗試推送 RSS 更新 (第 $attempt 次)..."
          
          if git push; then
            echo "✅ RSS 推送成功!"
            exit 0
          else
            echo "❌ 推送失敗，準備重試..."
            
            if [ $attempt -eq $max_attempts ]; then
              echo "❌ 已達最大重試次數，放棄推送"
              exit 1
            fi
            
            echo "🔄 拉取遠端變更並重新嘗試..."
            if git pull --rebase origin main; then
              echo "✅ 成功同步遠端變更"
            else
              echo "⚠️ 同步時出現問題，嘗試強制同步..."
              git rebase --abort 2>/dev/null || true
              git fetch origin main
              git reset --hard origin/main
              git add rss.xml
              git commit -m "🤖 Auto-update RSS feed"
            fi
            
            sleep_time=$((5 + RANDOM % 5))
            echo "⏳ 等待 $sleep_time 秒後重試..."
            sleep $sleep_time
          fi
          
          attempt=$((attempt + 1))
        done
