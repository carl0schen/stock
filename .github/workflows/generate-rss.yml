# .github/workflows/generate-rss.yml
name: Generate RSS Feed

on:
  push:
    branches: [ main ]
    paths:
      - '20**/**/index.html' # 監控所有以 '20' 開頭的資料夾下的 index.html 變動
  workflow_dispatch:  # 允許手動觸發

jobs:
  generate-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for other workflows
      if: github.event_name == 'push'
      run: |
        echo "等待其他 workflow 完成..."
        sleep 30 # 等待 30 秒讓其他 workflow 先執行
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 獲取完整歷史以便排序
        ref: main  # 確保拉取最新的 main 分支

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate RSS Feed
      run: |
        # 使用 'EOF' 標誌，並將腳本寫入檔案
        cat > generate-rss.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        const { XMLBuilder } = require('fast-xml-parser');

        const builder = new XMLBuilder({
          format: true,
          ignoreAttributes: false
        });

        const rssTemplate = {
          rss: {
            '@_version': '2.0',
            '@_xmlns:atom': 'http://www.w3.org/2005/Atom',
            channel: {
              title: '台股盤後 - 法人買賣超整理',
              link: 'https://stock.may.tw',
              description: '利用AI彙整台股盤後資訊，快速掃描法人當日籌碼。',
              language: 'zh-TW',
              'atom:link': {
                '@_href': 'https://stock.may.tw/rss.xml',
                '@_rel': 'self',
                '@_type': 'application/rss+xml'
              },
              lastBuildDate: new Date().toUTCString(),
              item: []
            }
          }
        };

        const getArticleFolders = (dirPath) => {
          let folders = [];
          const items = fs.readdirSync(dirPath, { withFileTypes: true });

          for (const item of items) {
            if (item.isDirectory()) {
              const fullPath = path.join(dirPath, item.name);
              if (/^\d{4}$/.test(item.name)) {
                folders = folders.concat(getArticleFolders(fullPath));
              } else if (/^\d{2}$/.test(item.name)) {
                if (fs.existsSync(path.join(fullPath, 'index.html'))) {
                  folders.push(fullPath);
                } else {
                  folders = folders.concat(getArticleFolders(fullPath));
                }
              }
            }
          }
          return folders;
        };

        const parseDateFromPath = (pathStr) => {
          const parts = pathStr.split(path.sep).filter(p => p !== '');
          if (parts.length >= 3) {
            const year = parts[parts.length - 3];
            const month = parts[parts.length - 2];
            const day = parts[parts.length - 1];
            return `${year}${month}${day}`;
          }
          return null;
        };

        const formatDate = (dateStr) => {
          const year = dateStr.substring(0, 4);
          const month = dateStr.substring(4, 6);
          const day = dateStr.substring(6, 8);
          return `${year}年${month}月${day}日`;
        };

        const toRSSDate = (dateStr) => {
          const year = dateStr.substring(0, 4);
          const month = dateStr.substring(4, 6);
          const day = dateStr.substring(6, 8);
          const date = new Date(year, month - 1, day, 16, 30, 0);
          return date.toUTCString();
        };

        const generateRSSItems = (folders) => {
          return folders.slice(0, 10).map(folder => {
            const dateStr = parseDateFromPath(folder);
            if (!dateStr) return null;
            
            return {
              title: `${formatDate(dateStr)} 法人買賣超整理`,
              link: `https://stock.may.tw/${folder}/`,
              description: `本文整理了${formatDate(dateStr)}台股盤後三大法人的交易動向。`,
              pubDate: toRSSDate(dateStr),
              guid: {
                '@_isPermaLink': 'true',
                '#text': `https://stock.may.tw/${folder}/`
              }
            };
          }).filter(item => item !== null);
        };

        const main = () => {
          try {
            const folders = getArticleFolders('.');
            console.log(`找到 ${folders.length} 個文章資料夾`);
            
            folders.sort((a, b) => parseDateFromPath(b).localeCompare(parseDateFromPath(a)));

            if (folders.length === 0) {
              console.log('沒有找到任何文章資料夾');
              return;
            }

            rssTemplate.rss.channel.item = generateRSSItems(folders);
            const xmlContent = builder.build(rssTemplate);
            
            fs.writeFileSync('rss.xml', xmlContent, 'utf8');
            console.log('RSS feed 生成完成');
            console.log(`包含 ${Math.min(folders.length, 10)} 個項目`);
          } catch (error) {
            console.error('生成 RSS 時發生錯誤:', error);
            process.exit(1);
          }
        };

        main();
        EOF
        
        # 安裝 fast-xml-parser
        npm install fast-xml-parser --prefix .github/workflows
        node generate-rss.js

    - name: Commit and push RSS file with retry
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add rss.xml
        
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Auto-update RSS feed"
          git push
        else
          echo "RSS 檔案沒有變更"
          exit 0
        fi
        