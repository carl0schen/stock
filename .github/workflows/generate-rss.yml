# .github/workflows/generate-rss.yml
name: Generate RSS Feed

on:
  push:
    branches: [ main ]
    paths:
      - '20*/??/??/**' # 監控 /YYYY/MM/DD/ 資料夾內的變更
  workflow_dispatch:  # 允許手動觸發

jobs:
  generate-rss:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for other workflows
      if: github.event_name == 'push'
      run: |
        echo "等待其他 workflow 完成..."
        sleep 30 # 等待 30 秒讓其他 workflow 先執行
    
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 獲取完整歷史以便排序
        ref: main  # 確保拉取最新的 main 分支

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Generate RSS Feed
      run: |
        cat > generate-rss.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        // RSS 模板
        const rssHeader = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>台股盤後 - 法人買賣超整理</title>
    <link>https://stock.may.tw</link>
    <description>利用AI彙整台股盤後資訊，快速掃描法人當日籌碼。</description>
    <language>zh-TW</language>
    <atom:link href="https://stock.may.tw/rss.xml" rel="self" type="application/rss+xml"/>
    <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>`;

        const rssFooter = `  </channel>
</rss>`;

        // 遞迴尋找符合 YYYY/MM/DD/ 格式的資料夾
        const getArticleFolders = (dirPath) => {
          let folders = [];
          const items = fs.readdirSync(dirPath, { withFileTypes: true });

          for (const item of items) {
            if (item.isDirectory()) {
              const fullPath = path.join(dirPath, item.name);
              // 檢查資料夾名稱是否符合月份或日期格式
              if (/^\d{2}$/.test(item.name)) {
                // 如果是日期資料夾，檢查是否存在 index.html
                const articlePath = path.join(fullPath, 'index.html');
                if (fs.existsSync(articlePath)) {
                  folders.push(fullPath);
                } else {
                  // 如果是月份資料夾，繼續遞迴搜尋
                  folders = folders.concat(getArticleFolders(fullPath));
                }
              } else if (/^\d{4}$/.test(item.name)) {
                // 如果是年份資料夾，繼續遞迴搜尋
                folders = folders.concat(getArticleFolders(fullPath));
              }
            }
          }
          return folders;
        };

        // 從路徑中解析出 YYYYMMDD 日期字串
        const parseDateFromPath = (pathStr) => {
          const parts = pathStr.split(path.sep).filter(p => p !== '');
          if (parts.length >= 3) {
            const year = parts[parts.length - 3];
            const month = parts[parts.length - 2];
            const day = parts[parts.length - 1];
            return `${year}${month}${day}`;
          }
          return null;
        };

        // 格式化日期顯示
        const formatDate = (dateStr) => {
          const year = dateStr.substring(0, 4);
          const month = dateStr.substring(4, 6);
          const day = dateStr.substring(6, 8);
          return `${year}年${month}月${day}日`;
        };

        // 轉換為 RSS 日期格式
        const toRSSDate = (dateStr) => {
          const year = dateStr.substring(0, 4);
          const month = dateStr.substring(4, 6);
          const day = dateStr.substring(6, 8);
          const date = new Date(year, month - 1, day, 16, 30, 0); // 設定為下午4點半
          return date.toUTCString();
        };

        // 生成 RSS 項目
        const generateRSSItems = (folders) => {
          return folders.slice(0, 10).map(folder => { // 只取最新 10 筆
            const dateStr = parseDateFromPath(folder);
            if (!dateStr) return '';
            
            const title = `${formatDate(dateStr)} 法人買賣超整理`;
            const link = `https://stock.may.tw/${folder}/`;
            const pubDate = toRSSDate(dateStr);
            const guid = `https://stock.may.tw/${folder}/`;
            
            return `  <item>
              <title>${title}</title>
              <link>${link}</link>
              <description>本文整理了${formatDate(dateStr)}台股盤後三大法人的交易動向。</description>
              <pubDate>${pubDate}</pubDate>
              <guid isPermaLink="true">${guid}</guid>
            </item>`;
          }).join('\n');
        };

        // 主程序
        const main = () => {
          try {
            const folders = getArticleFolders('.');
            console.log(`找到 ${folders.length} 個文章資料夾`);
            
            // 依日期排序，確保最新的在前
            folders.sort((a, b) => parseDateFromPath(b).localeCompare(parseDateFromPath(a)));

            if (folders.length === 0) {
              console.log('沒有找到任何文章資料夾');
              return;
            }

            const rssItems = generateRSSItems(folders);
            const rssContent = `${rssHeader}\n${rssItems}\n${rssFooter}`;
            
            fs.writeFileSync('rss.xml', rssContent, 'utf8');
            console.log('RSS feed 生成完成');
            console.log(`包含 ${Math.min(folders.length, 10)} 個項目`);
          } catch (error) {
            console.error('生成 RSS 時發生錯誤:', error);
            process.exit(1);
          }
        };

        main();
        EOF

        node generate-rss.js

    - name: Commit and push RSS file with retry
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add rss.xml
        
        if ! git diff --staged --quiet; then
          git commit -m "🤖 Auto-update RSS feed"
          git push
        else
          echo "RSS 檔案沒有變更"
          exit 0
        fi
        